local MobsList = {
	[14819490378] = {
		"Razor Boar",
		"Tortoise",
		"Wolf",
		"Brown Bear",
		"Rock Golem",
		"Crystal Boar",
		"Thunder Sakura Moose",
	}
}

local Bosses = {
	[14819490378] = {
		"Hagan",
		"Galiard",
		"Elron The Frenzy Lord"
	},
	[15695929915] = {

	},
	[16582687738] = {

	},
}

local Quests = {
	[14819490378] = {
		"A New Adventure [LVL 1]",
		"Angry Beach Shells [LVL 2]]",
		"Clearing the path [LVL 3]",
		"Wolf Problem [LVL 4]",
		"Quick Repairs [LVL 5]",
		"Hungry Bears [LVL 7]",
		"Rocky Foes [LVL 9]",
		"Blasting Rocks [LVL 10]",
		"Intense Moose [LVL 15]",
		"The Tower Dungeon [LVL 20]",
		"The Slimy Poison [LVL 22]",
		"The Final Boss [LVL 23]",
		"Minion Hunt [LVL 20]",
	},
}

local QuestEquivalency = {
	["A New Adventure [LVL 1]"] = 1,
	["Angry Beach Shells [LVL 2]]"] = 3,
	["Clearing the path [LVL 3]"] = 5,
	["Wolf Problem [LVL 4]"] = 123,
	["Quick Repairs [LVL 5]"] = 123,
	["Hungry Bears [LVL 7]"] = 12,
	["Rocky Foes [LVL 9]"] = 12,
	["Blasting Rocks [LVL 10]"] =144,
	["Intense Moose [LVL 15]"] = -12,
	["The Tower Dungeon [LVL 20]"] = 1023,
	["The Slimy Poison [LVL 22]"] = 1238,
	["The Final Boss [LVL 23]"] = 12389,
	["Minion Hunt [LVL 20]"] = 123,
}

local Floors = {
	["New Arcadia"] = 14819493140,
	["Floor 1"] = 14819490378,
	["Floor 2"] = 15695929915,
	["Floor 3"] = 16582687738,
}

-- Player Info
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

local Humanoid = Character:WaitForChild("Humanoid")
local Humrp = Character:WaitForChild("HumanoidRootPart")

Player.CharacterAdded:Connect(function(Char)
	Character = Char
	Humanoid = Char:WaitForChild("Humanoid")
	Humrp = Char:WaitForChild("HumanoidRootPart")
end)



local TS = game:GetService("TweenService")

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local PlaceID = game.PlaceId

local CombatSettings = {
	waitTime = 0,
	range = 0,
	active = false
}

local AutoFarmConfig = {
	direction = "Below",
	distance = nil,
}

local AutoFarmOptions = {
	mob = nil,
	quest = nil,
	mobToggleOn = nil,
	questToggleOn = nil,
	oreToggleOn = nil,
	dropsToggleOn = nil
}















local Window = Fluent:CreateWindow({
	Title = "Jason HUB 1.0",
	SubTitle = "| SwordBurst 3",
	TabWidth = 160,
	Size = UDim2.fromOffset(580, 460),
	Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
	Theme = "Aqua",
	MinimizeKey = Enum.KeyCode.Semicolon -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
	Autofarm = Window:AddTab({ Title = "Autofarm", Icon = "repeat" }),
	AutofarmConfig = Window:AddTab({ Title = "Autofarm Config", Icon = "repeat" }),
	Combat = Window:AddTab({ Title = "Combat", Icon = "sword" }),
	Teleports = Window:AddTab({ Title = "Teleports", Icon = "map-pin" }),
}

Window:SelectTab(1) -- Picks Autofarm as Starting Tab

do
	-- Autofarm Tab
	local MobDropdown = Tabs.Autofarm:AddDropdown("Dropdown", {
		Title = "Select Mob",
		Description = "Select Mob to Farm",
		Values = MobsList[game.PlaceId],
		Multi = false,
		Default = "--",
		Callback = function(Value)
			AutoFarmOptions.mob = Value
		end
	})
	
	local QuestDropdown = Tabs.Autofarm:AddDropdown("Dropdown", {
		Title = "Select Quest",
		Description = "Select Quest to AutoQuest",
		Values = Quests[game.PlaceId],
		Multi = false,
		Default = "--",
		Callback = function(Value)
			AutoFarmOptions.quest = QuestEquivalency[Value]
		end
	})
	
	local MobToggle = Tabs.Autofarm:AddToggle("MyToggle", {
		Title = "Auto Selected Mob",
		Description = "Enabled/Disabled to Farm Selected Mob",
		Default = false ,
		Callback = function(Value)
			AutoFarmOptions.mobToggleOn = Value
			while AutoFarmOptions.mobToggleOn do
				
				for _, v in pairs(workspace.Mobs:GetChildren()) do
					if v.Name == AutoFarmOptions.mob and AutoFarmOptions.mobToggleOn then
						local mobHumrp = v.PrimaryPart
						if not mobHumrp then continue end -- Skips If Mob Is Dead
						local mobCFrame = mobHumrp.CFrame
						local offset = CFrame.new(0,0,0)
						local weld = Instance.new("WeldConstraint", mobHumrp)
						
						print(Humrp.CFrame)
						
						if AutoFarmConfig.direction == "Below" then
							offset = CFrame.new(0,AutoFarmConfig.distance * -1 ,0)
						elseif AutoFarmConfig.direction == "Above"  then
							offset = CFrame.new(0,AutoFarmConfig.distance,0)
						elseif AutoFarmConfig.direction == "Behind" then
							offset = CFrame.new(0,0,AutoFarmConfig.distance)
						end
						
						local Tween = TS:Create(Humrp, TweenInfo.new(1), {CFrame = mobCFrame * offset})
						Tween:Play()
						Tween.Completed:Connect(function()
							weld.Part0 = mobHumrp
							weld.Part1 = Humrp
						end)
						
						
						repeat task.wait(0.5) until v.Parent == nil or not AutoFarmOptions.mobToggleOn
						
						if weld then weld:Destroy() end -- Destroys weld if player turned off autofarm before killing mob
					end
					
				end
				wait(1)
				
			end
		end
	})
	
	local QuestToggle = Tabs.Autofarm:AddToggle("MyToggle", {
		Title = "Auto Selected Quest",
		Description = "Enabled/Disabled to Farm Selected Quest",
		Default = false ,
		Callback = function(Value)
			AutoFarmOptions.questToggleOn = Value
			while AutoFarmOptions.questToggleOn do
				game:GetService("ReplicatedStorage").Systems.Quests.CompleteQuest:FireServer(AutoFarmOptions.quest)
				wait(0.5)
				game:GetService("ReplicatedStorage").Systems.Quests.AcceptQuest:FireServer(AutoFarmOptions.quest)
				wait(3)
			end
		end
	})
	
	local OreToggle = Tabs.Autofarm:AddToggle("MyToggle", {
		Title = "Auto Farm Ores",
		Description = "Teleport to Ores (Turn on to Auto Collect)",
		Default = false ,
		Callback = function(Value)
			print("Toggle was changed:", Value)
		end
	})
	
	local DropsToggle = Tabs.Autofarm:AddToggle("MyToggle", {
		Title = "Auto Collect Drops",
		Description = "Collect all drops from mobs",
		Default = false ,
		Callback = function(Value)
			print("Toggle was changed:", Value)
		end
	})

	
	-- Auto Farm Config Tab
	local PositionDropdown = Tabs.AutofarmConfig:AddDropdown("Dropdown", {
		Title = "Farm Position",
		Description = "Select Farm Position",
		Values = {"Below", "Above", "Behind"},
		Multi = false,
		Default = 1,
		Callback = function(Value)
			AutoFarmConfig.direction = Value
		end
	})
	
	local DistanceSlider = Tabs.AutofarmConfig:AddSlider("Slider", {
		Title = "Farm Distance",
		Description = "Adjust the distance to a mob",
		Default = 6,
		Min = 6,
		Max = 10,
		Rounding = 1,
		Callback = function(Value)
			AutoFarmConfig.distance = Value
		end
	})
	
	-- Combat Tab
	local TimerSlider = Tabs.Combat:AddSlider("Slider", {
		Title = "Kill Aura Speed",
		Description = "Time between player Attacks",
		Default = 0.5,
		Min = 0.35,
		Max = 1,
		Rounding = 2,
		Callback = function(Value)
			CombatSettings.waitTime = Value
		end
	})
	
	local DistanceSlider = Tabs.Combat:AddSlider("Slider", {
		Title = "Kill Aura Range",
		Description = "Set How Far Kill Aura Reaches",
		Default = 20,
		Min = 10,
		Max = 50,
		Rounding = 1,
		Callback = function(Value)
			CombatSettings.range = Value
		end
	})
	
	local AuraToggle = Tabs.Combat:AddToggle("MyToggle", {
		Title = "Kill Aura",
		Description = "Targets All Mobs In Range",
		Default = false ,
		Callback = function(Value)
			CombatSettings.active = Value
			print("Kill Aura")
			print(Value)
			while CombatSettings.active  do
				
				local parms = OverlapParams.new()
				parms.FilterDescendantsInstances = workspace["Mobs"]:GetChildren()
				parms.FilterType = Enum.RaycastFilterType.Include
				
				local mobsInRange = workspace:GetPartBoundsInRadius(Humrp.Position, CombatSettings.range, parms)
				
				local MobsToHit = {}
				
				--Loops Through And Gets Mob To Hit
				for _, v in pairs(mobsInRange) do
					local Mob = v.Parent
					if Mob:IsA("Model") then
						Mob.HumanoidRootPart.Size = Vector3.new(CombatSettings.range*2,CombatSettings.range*2,CombatSettings.range*2)
						table.insert(MobsToHit, Mob)
					end
				end
				
				game:GetService("ReplicatedStorage").Systems.Combat.PlayerAttack:FireServer(MobsToHit)
				
				
				wait(CombatSettings.waitTime)
			end
		end
	})
	
	-- Teleport Tab
	local ArenaDropdown = Tabs.Teleports:AddDropdown("Dropdown", {
		Title = "Boss Arenas",
		Description = "Chose Arena to Teleport To",
		Values = Bosses[game.PlaceId],
		Multi = false,
		Default = "--"
	})
	local FloorDropdown = Tabs.Teleports:AddDropdown("Dropdown", {
		Title = "Floor Teleport",
		Description = "Chose Floor to Teleport To",
		Values = {"New Arcadia", "Floor 1", "Floor 2", "Floor 3"},
		Multi = false,
		Default = "--"
	})
	
	ArenaDropdown:OnChanged(function(Value)
		if Value == "--" then return end
		local BossArenaFolder = workspace["BossArenas"][Value]
		local Position = BossArenaFolder["Spawn"].Position
		Character:MoveTo(Position)
	end)
	
	FloorDropdown:OnChanged(function(Value)
		if Value == "--" then return end
		game:GetService("TeleportService"):Teleport(Floors[Value])
	end)
	
end
